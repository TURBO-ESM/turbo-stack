name: Build Inside NCAR HPC Development Containers

# See the following link for more information on the NCAR HPC development containers:
# https://hub.docker.com/u/ncarcisl

on:
  workflow_dispatch:
  push:
    branches: ["main", "ci-tests", "container-ci"]
  pull_request:
    branches: ["main", "ci-tests", "container-ci"]

jobs:

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -elo pipefail {0}
    container:
      image: ncarcisl/cisldev-x86_64-almalinux9-gcc14-openmpi
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Build MOM6 with coverage instrumentation
        run: |
          ./build.sh --machine container --compiler gcc --codecov

      - name: Run double gyre (instrumented build)
        run: |
          cd examples/double_gyre
          mpiexec -n 2 --allow-run-as-root ../../bin/gcc/MOM6/MOM6

      - name: Generate coverage report
        run: |
          cd examples/double_gyre
          make coverage

      - name: Locate coverage HTML directory
        id: cov
        run: |
          set -e
          dir=$(find examples/double_gyre -type f -name index.html | grep -E '/coverage' | head -n1 || true)
          if [ -z "$dir" ]; then
            echo "Could not find coverage index.html" >&2
            find examples/double_gyre -maxdepth 4 -type d -print
            exit 1
          fi
          root=$(dirname "$dir")
          echo "dir=$root" >> "$GITHUB_OUTPUT"
          echo "Found coverage at: $root"

      - name: Upload coverage HTML as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mom6-coverage-html
          path: ${{ steps.cov.outputs.dir }}
          if-no-files-found: error

      - name: Assemble coverage site with index
        id: site
        run: |
          set -e
          site="coverage-site"
          mkdir -p "$site/double_gyre"
          cp -a "${{ steps.cov.outputs.dir }}/." "$site/double_gyre/"
          # Disable Jekyll processing (some coverage assets may be ignored otherwise)
          touch "$site/.nojekyll"
          cat > "$site/index.html" << 'HTML'
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>MOM6 Coverage Reports</title>
            <style>
              body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 2rem; }
              h1 { margin-bottom: 0.5rem; }
              ul { line-height: 1.8; }
            </style>
          </head>
          <body>
            <h1>MOM6 Coverage Reports</h1>
            <p>Select a report:</p>
            <ul>
              <li><a href="double_gyre/index.html">double_gyre</a></li>
            </ul>
          </body>
          </html>
          HTML
          echo "path=$site" >> "$GITHUB_OUTPUT"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.site.outputs.path }}

  deploy-coverage:
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci-tests') && github.event_name != 'pull_request'
    needs: coverage
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4

  #run-matrix:
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      compiler: [ nvhpc, oneapi, gcc14, clang ]
  #      mpi:      [ openmpi, mpich ]
  #      #gpu:      [ nogpu, cuda ]
  #      gpu:      [ nogpu ]
  #      arch:     [ x86_64 ]

  #      include:
  #        - mpi: openmpi
  #          extra_mpiexec_args: '--allow-run-as-root'

  #      exclude:
  #        # skip nvhpc/openmpi until CPU architecture mismatch gets resolved
  #        - compiler: nvhpc
  #          mpi: openmpi



  #  name: Build
  #  runs-on: ubuntu-latest
  #  defaults:
  #    run:
  #      shell: bash -elo pipefail {0}

  #  container:
  #    image: ncarcisl/cisldev-${{ matrix.arch }}-almalinux9-${{ matrix.compiler }}-${{ matrix.mpi }}${{ matrix.gpu == 'cuda' && '-cuda' || '' }}

  #  steps:
  #    - uses: actions/checkout@v4
  #      with:
  #        submodules: 'recursive'
  #        fetch-depth: 0

  #    - name: Interrogate Runtime Environment
  #      run: |
  #        cat /container/config_env.sh
  #        lscpu
  #        echo && echo && echo
  #        echo '----------------------------------------------------------------'
  #        echo && echo && echo
  #        echo "CC=${CC}"
  #        echo "CXX=${CXX}"
  #        echo "FC=${FC}"
  #        echo "F77=${F77}"
  #        echo
  #        echo "CFLAGS=${CFLAGS}"
  #        echo "CPPFLAGS=${CPPFLAGS}"
  #        echo "CXXFLAGS=${CXXFLAGS}"
  #        echo "FCFLAGS=${FCFLAGS}"
  #        echo "F77FLAGS=${F77FLAGS}"
  #        export CC CXX FC F77 CFLAGS CXXFLAGS FCFLAGS F77FLAGS CPPFLAGS
  #        conda --version 2>/dev/null || echo " --> no conda in this container"
  #        which mpicc
  #        mpicc --version 2>/dev/null || true

  #    - name: MPI+OpenMP Hello World
  #      run: |
  #        mpicxx -o ./hello_world_mpi /container/extras/hello_world_mpi.C -fopenmp
  #        ldd ./hello_world_mpi
  #        export OMP_NUM_THREADS=2
  #        mpiexec -n 2 ${{ matrix.extra_mpiexec_args }} ./hello_world_mpi

  #    - name: Build turbo-stack
  #      run: |
  #        echo "Building turbo-stack..."
  #        ./build.sh --machine container --compiler ${COMPILER_FAMILY}

  #    - name: Run double gyre test
  #      run: |
  #        echo "Running double gyre test..."
  #        cd ./examples/double_gyre
  #        mpiexec -n 2 ${{ matrix.extra_mpiexec_args }} ../../bin/${COMPILER_FAMILY}/MOM6/MOM6
